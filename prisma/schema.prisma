// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = "prisma://accelerate.prisma-data.net/?api_key=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcGlfa2V5IjoiMTdiMGRkOTctNzhkZS00NTM0LTg4NmItMDBjODBkZjc2OWE2IiwidGVuYW50X2lkIjoiMWIzZWE3YmQ3ZWVlMTEwZDc2OTUwMTc3YWMyZjk1NDJlODNhZDVhYjMwNzZlODBlNDA3NmRjNGU4MTlmMWYzNyIsImludGVybmFsX3NlY3JldCI6Ijk5ZDhhMDcwLWI5ZjAtNGJiZC1hNjlkLTQ3NjRkNWRmZmVkYyJ9.hNE3D2JNB2gqguJ6-asEZizDH0hqFV7C_RzRCJlDlxg"
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String    @unique
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  accounts      Account[]
  sessions      Session[]
  password      String

  @@map(name: "users")
}

model Item {
  id          String    @id @default(cuid())
  key         String    @unique
  name        String
  description String?
  order       Int
  category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  String?
}

model Category {
  id       String     @id @default(cuid())
  key      String     @unique
  name     String
  order    Int
  items    Item[]
  children Category[] @relation("children")
  parent   Category?  @relation("children", fields: [parentId], references: [id])
  parentId String?    @map("CategoryId")
}
